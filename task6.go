package main

import (
	"fmt"
	"math"
)

// Задание 2. Окружность
func circle(a *float64, pi *float64) {
	var radius = math.Sqrt((*a) / (*pi))
	fmt.Print("Диаметр окружности: ", radius*2)
	fmt.Print("\n")
	fmt.Print("Длина окружности: ", 2*(*pi)*radius)
}

// # Задание 2. Прямоугольник
func rectangle(c *float64, d *float64) {
	fmt.Print("Площадь праямоугольника: ", (*c)*(*d))
}

func main() {
	// переписать на указателях можно большую часть заданий, например задание 2 может быть переписано следующим образом
	// Задание 2. Окружность
	var a float64
	var pi float64 = math.Pi

	fmt.Print("Введите площадь окружности: ")
	fmt.Scanln(&a)

	circle(&a, &pi)

	// # Задание 2. Прямоугольник
	var c, d float64
	fmt.Print("Введите длину праямоугольника: ")
	fmt.Scanln(&c)

	fmt.Print("Введите ширину праямоугольника: ")
	fmt.Scanln(&d)
	rectangle(&c, &d)

	// Также можно переписать калкулятор, сортировку вставкой, числа фибоначчи

	//Задание 2. Для арифметического умножения и разыменования указателей в Go используется один и тот же символ — оператор (*).
	//  Как вы думаете, как компилятор Go понимает, в каких случаях в выражении имеется в виду умножение,
	// а в каких — разыменование указателя?

	// Компилятор раскладывает выражение в дерево. Умножение является бинарным оператором, а разываменование унарным.
	// При разложении в дерево компилятор проверяет типы данных стоящих по обе стороны от оператора и так понимает что перед ним
	// бинарный или унарный оператор
}
